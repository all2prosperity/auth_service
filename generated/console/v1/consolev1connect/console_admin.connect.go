// Console Admin API v1
// Defines administrative operations for the Auth Console

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: console/v1/console_admin.proto

package consolev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/all2prosperity/auth_service/generated/console/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConsoleAdminServiceName is the fully-qualified name of the ConsoleAdminService service.
	ConsoleAdminServiceName = "console.v1.ConsoleAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConsoleAdminServiceListUsersProcedure is the fully-qualified name of the ConsoleAdminService's
	// ListUsers RPC.
	ConsoleAdminServiceListUsersProcedure = "/console.v1.ConsoleAdminService/ListUsers"
	// ConsoleAdminServiceGetUserProcedure is the fully-qualified name of the ConsoleAdminService's
	// GetUser RPC.
	ConsoleAdminServiceGetUserProcedure = "/console.v1.ConsoleAdminService/GetUser"
	// ConsoleAdminServiceLockUserProcedure is the fully-qualified name of the ConsoleAdminService's
	// LockUser RPC.
	ConsoleAdminServiceLockUserProcedure = "/console.v1.ConsoleAdminService/LockUser"
	// ConsoleAdminServiceUnlockUserProcedure is the fully-qualified name of the ConsoleAdminService's
	// UnlockUser RPC.
	ConsoleAdminServiceUnlockUserProcedure = "/console.v1.ConsoleAdminService/UnlockUser"
	// ConsoleAdminServiceUpdateUserRoleProcedure is the fully-qualified name of the
	// ConsoleAdminService's UpdateUserRole RPC.
	ConsoleAdminServiceUpdateUserRoleProcedure = "/console.v1.ConsoleAdminService/UpdateUserRole"
	// ConsoleAdminServiceListAuditLogsProcedure is the fully-qualified name of the
	// ConsoleAdminService's ListAuditLogs RPC.
	ConsoleAdminServiceListAuditLogsProcedure = "/console.v1.ConsoleAdminService/ListAuditLogs"
	// ConsoleAdminServiceGetCodeStatsProcedure is the fully-qualified name of the ConsoleAdminService's
	// GetCodeStats RPC.
	ConsoleAdminServiceGetCodeStatsProcedure = "/console.v1.ConsoleAdminService/GetCodeStats"
	// ConsoleAdminServiceGetSettingsProcedure is the fully-qualified name of the ConsoleAdminService's
	// GetSettings RPC.
	ConsoleAdminServiceGetSettingsProcedure = "/console.v1.ConsoleAdminService/GetSettings"
	// ConsoleAdminServiceUpdateSettingsProcedure is the fully-qualified name of the
	// ConsoleAdminService's UpdateSettings RPC.
	ConsoleAdminServiceUpdateSettingsProcedure = "/console.v1.ConsoleAdminService/UpdateSettings"
	// ConsoleAdminServiceRevokeUserTokensProcedure is the fully-qualified name of the
	// ConsoleAdminService's RevokeUserTokens RPC.
	ConsoleAdminServiceRevokeUserTokensProcedure = "/console.v1.ConsoleAdminService/RevokeUserTokens"
)

// ConsoleAdminServiceClient is a client for the console.v1.ConsoleAdminService service.
type ConsoleAdminServiceClient interface {
	// User Management
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	LockUser(context.Context, *connect.Request[v1.LockUserRequest]) (*connect.Response[v1.LockUserResponse], error)
	UnlockUser(context.Context, *connect.Request[v1.UnlockUserRequest]) (*connect.Response[v1.UnlockUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	// Audit Logs
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
	// Verification Code Statistics
	GetCodeStats(context.Context, *connect.Request[v1.GetCodeStatsRequest]) (*connect.Response[v1.GetCodeStatsResponse], error)
	// System Settings
	GetSettings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSettingsResponse], error)
	UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error)
	// Revoke Tokens
	RevokeUserTokens(context.Context, *connect.Request[v1.RevokeUserTokensRequest]) (*connect.Response[v1.RevokeUserTokensResponse], error)
}

// NewConsoleAdminServiceClient constructs a client for the console.v1.ConsoleAdminService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConsoleAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConsoleAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	consoleAdminServiceMethods := v1.File_console_v1_console_admin_proto.Services().ByName("ConsoleAdminService").Methods()
	return &consoleAdminServiceClient{
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+ConsoleAdminServiceListUsersProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+ConsoleAdminServiceGetUserProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		lockUser: connect.NewClient[v1.LockUserRequest, v1.LockUserResponse](
			httpClient,
			baseURL+ConsoleAdminServiceLockUserProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("LockUser")),
			connect.WithClientOptions(opts...),
		),
		unlockUser: connect.NewClient[v1.UnlockUserRequest, v1.UnlockUserResponse](
			httpClient,
			baseURL+ConsoleAdminServiceUnlockUserProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("UnlockUser")),
			connect.WithClientOptions(opts...),
		),
		updateUserRole: connect.NewClient[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse](
			httpClient,
			baseURL+ConsoleAdminServiceUpdateUserRoleProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("UpdateUserRole")),
			connect.WithClientOptions(opts...),
		),
		listAuditLogs: connect.NewClient[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse](
			httpClient,
			baseURL+ConsoleAdminServiceListAuditLogsProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("ListAuditLogs")),
			connect.WithClientOptions(opts...),
		),
		getCodeStats: connect.NewClient[v1.GetCodeStatsRequest, v1.GetCodeStatsResponse](
			httpClient,
			baseURL+ConsoleAdminServiceGetCodeStatsProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("GetCodeStats")),
			connect.WithClientOptions(opts...),
		),
		getSettings: connect.NewClient[emptypb.Empty, v1.GetSettingsResponse](
			httpClient,
			baseURL+ConsoleAdminServiceGetSettingsProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("GetSettings")),
			connect.WithClientOptions(opts...),
		),
		updateSettings: connect.NewClient[v1.UpdateSettingsRequest, v1.UpdateSettingsResponse](
			httpClient,
			baseURL+ConsoleAdminServiceUpdateSettingsProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("UpdateSettings")),
			connect.WithClientOptions(opts...),
		),
		revokeUserTokens: connect.NewClient[v1.RevokeUserTokensRequest, v1.RevokeUserTokensResponse](
			httpClient,
			baseURL+ConsoleAdminServiceRevokeUserTokensProcedure,
			connect.WithSchema(consoleAdminServiceMethods.ByName("RevokeUserTokens")),
			connect.WithClientOptions(opts...),
		),
	}
}

// consoleAdminServiceClient implements ConsoleAdminServiceClient.
type consoleAdminServiceClient struct {
	listUsers        *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getUser          *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	lockUser         *connect.Client[v1.LockUserRequest, v1.LockUserResponse]
	unlockUser       *connect.Client[v1.UnlockUserRequest, v1.UnlockUserResponse]
	updateUserRole   *connect.Client[v1.UpdateUserRoleRequest, v1.UpdateUserRoleResponse]
	listAuditLogs    *connect.Client[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse]
	getCodeStats     *connect.Client[v1.GetCodeStatsRequest, v1.GetCodeStatsResponse]
	getSettings      *connect.Client[emptypb.Empty, v1.GetSettingsResponse]
	updateSettings   *connect.Client[v1.UpdateSettingsRequest, v1.UpdateSettingsResponse]
	revokeUserTokens *connect.Client[v1.RevokeUserTokensRequest, v1.RevokeUserTokensResponse]
}

// ListUsers calls console.v1.ConsoleAdminService.ListUsers.
func (c *consoleAdminServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUser calls console.v1.ConsoleAdminService.GetUser.
func (c *consoleAdminServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// LockUser calls console.v1.ConsoleAdminService.LockUser.
func (c *consoleAdminServiceClient) LockUser(ctx context.Context, req *connect.Request[v1.LockUserRequest]) (*connect.Response[v1.LockUserResponse], error) {
	return c.lockUser.CallUnary(ctx, req)
}

// UnlockUser calls console.v1.ConsoleAdminService.UnlockUser.
func (c *consoleAdminServiceClient) UnlockUser(ctx context.Context, req *connect.Request[v1.UnlockUserRequest]) (*connect.Response[v1.UnlockUserResponse], error) {
	return c.unlockUser.CallUnary(ctx, req)
}

// UpdateUserRole calls console.v1.ConsoleAdminService.UpdateUserRole.
func (c *consoleAdminServiceClient) UpdateUserRole(ctx context.Context, req *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return c.updateUserRole.CallUnary(ctx, req)
}

// ListAuditLogs calls console.v1.ConsoleAdminService.ListAuditLogs.
func (c *consoleAdminServiceClient) ListAuditLogs(ctx context.Context, req *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return c.listAuditLogs.CallUnary(ctx, req)
}

// GetCodeStats calls console.v1.ConsoleAdminService.GetCodeStats.
func (c *consoleAdminServiceClient) GetCodeStats(ctx context.Context, req *connect.Request[v1.GetCodeStatsRequest]) (*connect.Response[v1.GetCodeStatsResponse], error) {
	return c.getCodeStats.CallUnary(ctx, req)
}

// GetSettings calls console.v1.ConsoleAdminService.GetSettings.
func (c *consoleAdminServiceClient) GetSettings(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSettingsResponse], error) {
	return c.getSettings.CallUnary(ctx, req)
}

// UpdateSettings calls console.v1.ConsoleAdminService.UpdateSettings.
func (c *consoleAdminServiceClient) UpdateSettings(ctx context.Context, req *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error) {
	return c.updateSettings.CallUnary(ctx, req)
}

// RevokeUserTokens calls console.v1.ConsoleAdminService.RevokeUserTokens.
func (c *consoleAdminServiceClient) RevokeUserTokens(ctx context.Context, req *connect.Request[v1.RevokeUserTokensRequest]) (*connect.Response[v1.RevokeUserTokensResponse], error) {
	return c.revokeUserTokens.CallUnary(ctx, req)
}

// ConsoleAdminServiceHandler is an implementation of the console.v1.ConsoleAdminService service.
type ConsoleAdminServiceHandler interface {
	// User Management
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	LockUser(context.Context, *connect.Request[v1.LockUserRequest]) (*connect.Response[v1.LockUserResponse], error)
	UnlockUser(context.Context, *connect.Request[v1.UnlockUserRequest]) (*connect.Response[v1.UnlockUserResponse], error)
	UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error)
	// Audit Logs
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
	// Verification Code Statistics
	GetCodeStats(context.Context, *connect.Request[v1.GetCodeStatsRequest]) (*connect.Response[v1.GetCodeStatsResponse], error)
	// System Settings
	GetSettings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSettingsResponse], error)
	UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error)
	// Revoke Tokens
	RevokeUserTokens(context.Context, *connect.Request[v1.RevokeUserTokensRequest]) (*connect.Response[v1.RevokeUserTokensResponse], error)
}

// NewConsoleAdminServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConsoleAdminServiceHandler(svc ConsoleAdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	consoleAdminServiceMethods := v1.File_console_v1_console_admin_proto.Services().ByName("ConsoleAdminService").Methods()
	consoleAdminServiceListUsersHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(consoleAdminServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceGetUserHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(consoleAdminServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceLockUserHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceLockUserProcedure,
		svc.LockUser,
		connect.WithSchema(consoleAdminServiceMethods.ByName("LockUser")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceUnlockUserHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceUnlockUserProcedure,
		svc.UnlockUser,
		connect.WithSchema(consoleAdminServiceMethods.ByName("UnlockUser")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceUpdateUserRoleHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceUpdateUserRoleProcedure,
		svc.UpdateUserRole,
		connect.WithSchema(consoleAdminServiceMethods.ByName("UpdateUserRole")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceListAuditLogsHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceListAuditLogsProcedure,
		svc.ListAuditLogs,
		connect.WithSchema(consoleAdminServiceMethods.ByName("ListAuditLogs")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceGetCodeStatsHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceGetCodeStatsProcedure,
		svc.GetCodeStats,
		connect.WithSchema(consoleAdminServiceMethods.ByName("GetCodeStats")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceGetSettingsHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceGetSettingsProcedure,
		svc.GetSettings,
		connect.WithSchema(consoleAdminServiceMethods.ByName("GetSettings")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceUpdateSettingsHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceUpdateSettingsProcedure,
		svc.UpdateSettings,
		connect.WithSchema(consoleAdminServiceMethods.ByName("UpdateSettings")),
		connect.WithHandlerOptions(opts...),
	)
	consoleAdminServiceRevokeUserTokensHandler := connect.NewUnaryHandler(
		ConsoleAdminServiceRevokeUserTokensProcedure,
		svc.RevokeUserTokens,
		connect.WithSchema(consoleAdminServiceMethods.ByName("RevokeUserTokens")),
		connect.WithHandlerOptions(opts...),
	)
	return "/console.v1.ConsoleAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConsoleAdminServiceListUsersProcedure:
			consoleAdminServiceListUsersHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceGetUserProcedure:
			consoleAdminServiceGetUserHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceLockUserProcedure:
			consoleAdminServiceLockUserHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceUnlockUserProcedure:
			consoleAdminServiceUnlockUserHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceUpdateUserRoleProcedure:
			consoleAdminServiceUpdateUserRoleHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceListAuditLogsProcedure:
			consoleAdminServiceListAuditLogsHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceGetCodeStatsProcedure:
			consoleAdminServiceGetCodeStatsHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceGetSettingsProcedure:
			consoleAdminServiceGetSettingsHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceUpdateSettingsProcedure:
			consoleAdminServiceUpdateSettingsHandler.ServeHTTP(w, r)
		case ConsoleAdminServiceRevokeUserTokensProcedure:
			consoleAdminServiceRevokeUserTokensHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConsoleAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConsoleAdminServiceHandler struct{}

func (UnimplementedConsoleAdminServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.ListUsers is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.GetUser is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) LockUser(context.Context, *connect.Request[v1.LockUserRequest]) (*connect.Response[v1.LockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.LockUser is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) UnlockUser(context.Context, *connect.Request[v1.UnlockUserRequest]) (*connect.Response[v1.UnlockUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.UnlockUser is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) UpdateUserRole(context.Context, *connect.Request[v1.UpdateUserRoleRequest]) (*connect.Response[v1.UpdateUserRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.UpdateUserRole is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.ListAuditLogs is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) GetCodeStats(context.Context, *connect.Request[v1.GetCodeStatsRequest]) (*connect.Response[v1.GetCodeStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.GetCodeStats is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) GetSettings(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.GetSettings is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) UpdateSettings(context.Context, *connect.Request[v1.UpdateSettingsRequest]) (*connect.Response[v1.UpdateSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.UpdateSettings is not implemented"))
}

func (UnimplementedConsoleAdminServiceHandler) RevokeUserTokens(context.Context, *connect.Request[v1.RevokeUserTokensRequest]) (*connect.Response[v1.RevokeUserTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("console.v1.ConsoleAdminService.RevokeUserTokens is not implemented"))
}
