// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	v1 "auth_service/generated/auth/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
	// SocialAuthServiceName is the fully-qualified name of the SocialAuthService service.
	SocialAuthServiceName = "auth.v1.SocialAuthService"
	// AuthAdminServiceName is the fully-qualified name of the AuthAdminService service.
	AuthAdminServiceName = "auth.v1.AuthAdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceRegisterProcedure is the fully-qualified name of the AuthService's Register RPC.
	AuthServiceRegisterProcedure = "/auth.v1.AuthService/Register"
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/auth.v1.AuthService/Login"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/auth.v1.AuthService/RefreshToken"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/auth.v1.AuthService/Logout"
	// AuthServiceGetMeProcedure is the fully-qualified name of the AuthService's GetMe RPC.
	AuthServiceGetMeProcedure = "/auth.v1.AuthService/GetMe"
	// AuthServiceStartPasswordResetProcedure is the fully-qualified name of the AuthService's
	// StartPasswordReset RPC.
	AuthServiceStartPasswordResetProcedure = "/auth.v1.AuthService/StartPasswordReset"
	// AuthServiceCompletePasswordResetProcedure is the fully-qualified name of the AuthService's
	// CompletePasswordReset RPC.
	AuthServiceCompletePasswordResetProcedure = "/auth.v1.AuthService/CompletePasswordReset"
	// AuthServiceStartCodeLoginProcedure is the fully-qualified name of the AuthService's
	// StartCodeLogin RPC.
	AuthServiceStartCodeLoginProcedure = "/auth.v1.AuthService/StartCodeLogin"
	// AuthServiceCompleteCodeLoginProcedure is the fully-qualified name of the AuthService's
	// CompleteCodeLogin RPC.
	AuthServiceCompleteCodeLoginProcedure = "/auth.v1.AuthService/CompleteCodeLogin"
	// AuthServiceStartCodeRegisterProcedure is the fully-qualified name of the AuthService's
	// StartCodeRegister RPC.
	AuthServiceStartCodeRegisterProcedure = "/auth.v1.AuthService/StartCodeRegister"
	// AuthServiceCompleteCodeRegisterProcedure is the fully-qualified name of the AuthService's
	// CompleteCodeRegister RPC.
	AuthServiceCompleteCodeRegisterProcedure = "/auth.v1.AuthService/CompleteCodeRegister"
	// SocialAuthServiceOAuthStartProcedure is the fully-qualified name of the SocialAuthService's
	// OAuthStart RPC.
	SocialAuthServiceOAuthStartProcedure = "/auth.v1.SocialAuthService/OAuthStart"
	// SocialAuthServiceOAuthCallbackProcedure is the fully-qualified name of the SocialAuthService's
	// OAuthCallback RPC.
	SocialAuthServiceOAuthCallbackProcedure = "/auth.v1.SocialAuthService/OAuthCallback"
	// AuthAdminServiceUpdateUserRolesProcedure is the fully-qualified name of the AuthAdminService's
	// UpdateUserRoles RPC.
	AuthAdminServiceUpdateUserRolesProcedure = "/auth.v1.AuthAdminService/UpdateUserRoles"
	// AuthAdminServiceListRolesProcedure is the fully-qualified name of the AuthAdminService's
	// ListRoles RPC.
	AuthAdminServiceListRolesProcedure = "/auth.v1.AuthAdminService/ListRoles"
	// AuthAdminServiceListAuditLogsProcedure is the fully-qualified name of the AuthAdminService's
	// ListAuditLogs RPC.
	AuthAdminServiceListAuditLogsProcedure = "/auth.v1.AuthAdminService/ListAuditLogs"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	// password reset (email or SMS)
	StartPasswordReset(context.Context, *connect.Request[v1.StartPasswordResetRequest]) (*connect.Response[emptypb.Empty], error)
	CompletePasswordReset(context.Context, *connect.Request[v1.CompletePasswordResetRequest]) (*connect.Response[emptypb.Empty], error)
	// password-less code login (email or SMS)
	StartCodeLogin(context.Context, *connect.Request[v1.StartCodeLoginRequest]) (*connect.Response[emptypb.Empty], error)
	CompleteCodeLogin(context.Context, *connect.Request[v1.CompleteCodeLoginRequest]) (*connect.Response[v1.CompleteCodeLoginResponse], error)
	// code-based registration (SMS)
	StartCodeRegister(context.Context, *connect.Request[v1.StartCodeRegisterRequest]) (*connect.Response[emptypb.Empty], error)
	CompleteCodeRegister(context.Context, *connect.Request[v1.CompleteCodeRegisterRequest]) (*connect.Response[v1.CompleteCodeRegisterResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthServiceRegisterProcedure,
			connect.WithSchema(authServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+AuthServiceGetMeProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetMe")),
			connect.WithClientOptions(opts...),
		),
		startPasswordReset: connect.NewClient[v1.StartPasswordResetRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceStartPasswordResetProcedure,
			connect.WithSchema(authServiceMethods.ByName("StartPasswordReset")),
			connect.WithClientOptions(opts...),
		),
		completePasswordReset: connect.NewClient[v1.CompletePasswordResetRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceCompletePasswordResetProcedure,
			connect.WithSchema(authServiceMethods.ByName("CompletePasswordReset")),
			connect.WithClientOptions(opts...),
		),
		startCodeLogin: connect.NewClient[v1.StartCodeLoginRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceStartCodeLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("StartCodeLogin")),
			connect.WithClientOptions(opts...),
		),
		completeCodeLogin: connect.NewClient[v1.CompleteCodeLoginRequest, v1.CompleteCodeLoginResponse](
			httpClient,
			baseURL+AuthServiceCompleteCodeLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("CompleteCodeLogin")),
			connect.WithClientOptions(opts...),
		),
		startCodeRegister: connect.NewClient[v1.StartCodeRegisterRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceStartCodeRegisterProcedure,
			connect.WithSchema(authServiceMethods.ByName("StartCodeRegister")),
			connect.WithClientOptions(opts...),
		),
		completeCodeRegister: connect.NewClient[v1.CompleteCodeRegisterRequest, v1.CompleteCodeRegisterResponse](
			httpClient,
			baseURL+AuthServiceCompleteCodeRegisterProcedure,
			connect.WithSchema(authServiceMethods.ByName("CompleteCodeRegister")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	register              *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	login                 *connect.Client[v1.LoginRequest, v1.LoginResponse]
	refreshToken          *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	logout                *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	getMe                 *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
	startPasswordReset    *connect.Client[v1.StartPasswordResetRequest, emptypb.Empty]
	completePasswordReset *connect.Client[v1.CompletePasswordResetRequest, emptypb.Empty]
	startCodeLogin        *connect.Client[v1.StartCodeLoginRequest, emptypb.Empty]
	completeCodeLogin     *connect.Client[v1.CompleteCodeLoginRequest, v1.CompleteCodeLoginResponse]
	startCodeRegister     *connect.Client[v1.StartCodeRegisterRequest, emptypb.Empty]
	completeCodeRegister  *connect.Client[v1.CompleteCodeRegisterRequest, v1.CompleteCodeRegisterResponse]
}

// Register calls auth.v1.AuthService.Register.
func (c *authServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Login calls auth.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls auth.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Logout calls auth.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// GetMe calls auth.v1.AuthService.GetMe.
func (c *authServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// StartPasswordReset calls auth.v1.AuthService.StartPasswordReset.
func (c *authServiceClient) StartPasswordReset(ctx context.Context, req *connect.Request[v1.StartPasswordResetRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startPasswordReset.CallUnary(ctx, req)
}

// CompletePasswordReset calls auth.v1.AuthService.CompletePasswordReset.
func (c *authServiceClient) CompletePasswordReset(ctx context.Context, req *connect.Request[v1.CompletePasswordResetRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.completePasswordReset.CallUnary(ctx, req)
}

// StartCodeLogin calls auth.v1.AuthService.StartCodeLogin.
func (c *authServiceClient) StartCodeLogin(ctx context.Context, req *connect.Request[v1.StartCodeLoginRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startCodeLogin.CallUnary(ctx, req)
}

// CompleteCodeLogin calls auth.v1.AuthService.CompleteCodeLogin.
func (c *authServiceClient) CompleteCodeLogin(ctx context.Context, req *connect.Request[v1.CompleteCodeLoginRequest]) (*connect.Response[v1.CompleteCodeLoginResponse], error) {
	return c.completeCodeLogin.CallUnary(ctx, req)
}

// StartCodeRegister calls auth.v1.AuthService.StartCodeRegister.
func (c *authServiceClient) StartCodeRegister(ctx context.Context, req *connect.Request[v1.StartCodeRegisterRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.startCodeRegister.CallUnary(ctx, req)
}

// CompleteCodeRegister calls auth.v1.AuthService.CompleteCodeRegister.
func (c *authServiceClient) CompleteCodeRegister(ctx context.Context, req *connect.Request[v1.CompleteCodeRegisterRequest]) (*connect.Response[v1.CompleteCodeRegisterResponse], error) {
	return c.completeCodeRegister.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	// password reset (email or SMS)
	StartPasswordReset(context.Context, *connect.Request[v1.StartPasswordResetRequest]) (*connect.Response[emptypb.Empty], error)
	CompletePasswordReset(context.Context, *connect.Request[v1.CompletePasswordResetRequest]) (*connect.Response[emptypb.Empty], error)
	// password-less code login (email or SMS)
	StartCodeLogin(context.Context, *connect.Request[v1.StartCodeLoginRequest]) (*connect.Response[emptypb.Empty], error)
	CompleteCodeLogin(context.Context, *connect.Request[v1.CompleteCodeLoginRequest]) (*connect.Response[v1.CompleteCodeLoginResponse], error)
	// code-based registration (SMS)
	StartCodeRegister(context.Context, *connect.Request[v1.StartCodeRegisterRequest]) (*connect.Response[emptypb.Empty], error)
	CompleteCodeRegister(context.Context, *connect.Request[v1.CompleteCodeRegisterRequest]) (*connect.Response[v1.CompleteCodeRegisterResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceRegisterHandler := connect.NewUnaryHandler(
		AuthServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(authServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetMeHandler := connect.NewUnaryHandler(
		AuthServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(authServiceMethods.ByName("GetMe")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceStartPasswordResetHandler := connect.NewUnaryHandler(
		AuthServiceStartPasswordResetProcedure,
		svc.StartPasswordReset,
		connect.WithSchema(authServiceMethods.ByName("StartPasswordReset")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCompletePasswordResetHandler := connect.NewUnaryHandler(
		AuthServiceCompletePasswordResetProcedure,
		svc.CompletePasswordReset,
		connect.WithSchema(authServiceMethods.ByName("CompletePasswordReset")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceStartCodeLoginHandler := connect.NewUnaryHandler(
		AuthServiceStartCodeLoginProcedure,
		svc.StartCodeLogin,
		connect.WithSchema(authServiceMethods.ByName("StartCodeLogin")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCompleteCodeLoginHandler := connect.NewUnaryHandler(
		AuthServiceCompleteCodeLoginProcedure,
		svc.CompleteCodeLogin,
		connect.WithSchema(authServiceMethods.ByName("CompleteCodeLogin")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceStartCodeRegisterHandler := connect.NewUnaryHandler(
		AuthServiceStartCodeRegisterProcedure,
		svc.StartCodeRegister,
		connect.WithSchema(authServiceMethods.ByName("StartCodeRegister")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCompleteCodeRegisterHandler := connect.NewUnaryHandler(
		AuthServiceCompleteCodeRegisterProcedure,
		svc.CompleteCodeRegister,
		connect.WithSchema(authServiceMethods.ByName("CompleteCodeRegister")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceRegisterProcedure:
			authServiceRegisterHandler.ServeHTTP(w, r)
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceGetMeProcedure:
			authServiceGetMeHandler.ServeHTTP(w, r)
		case AuthServiceStartPasswordResetProcedure:
			authServiceStartPasswordResetHandler.ServeHTTP(w, r)
		case AuthServiceCompletePasswordResetProcedure:
			authServiceCompletePasswordResetHandler.ServeHTTP(w, r)
		case AuthServiceStartCodeLoginProcedure:
			authServiceStartCodeLoginHandler.ServeHTTP(w, r)
		case AuthServiceCompleteCodeLoginProcedure:
			authServiceCompleteCodeLoginHandler.ServeHTTP(w, r)
		case AuthServiceStartCodeRegisterProcedure:
			authServiceStartCodeRegisterHandler.ServeHTTP(w, r)
		case AuthServiceCompleteCodeRegisterProcedure:
			authServiceCompleteCodeRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Register is not implemented"))
}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GetMe is not implemented"))
}

func (UnimplementedAuthServiceHandler) StartPasswordReset(context.Context, *connect.Request[v1.StartPasswordResetRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.StartPasswordReset is not implemented"))
}

func (UnimplementedAuthServiceHandler) CompletePasswordReset(context.Context, *connect.Request[v1.CompletePasswordResetRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.CompletePasswordReset is not implemented"))
}

func (UnimplementedAuthServiceHandler) StartCodeLogin(context.Context, *connect.Request[v1.StartCodeLoginRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.StartCodeLogin is not implemented"))
}

func (UnimplementedAuthServiceHandler) CompleteCodeLogin(context.Context, *connect.Request[v1.CompleteCodeLoginRequest]) (*connect.Response[v1.CompleteCodeLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.CompleteCodeLogin is not implemented"))
}

func (UnimplementedAuthServiceHandler) StartCodeRegister(context.Context, *connect.Request[v1.StartCodeRegisterRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.StartCodeRegister is not implemented"))
}

func (UnimplementedAuthServiceHandler) CompleteCodeRegister(context.Context, *connect.Request[v1.CompleteCodeRegisterRequest]) (*connect.Response[v1.CompleteCodeRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.CompleteCodeRegister is not implemented"))
}

// SocialAuthServiceClient is a client for the auth.v1.SocialAuthService service.
type SocialAuthServiceClient interface {
	OAuthStart(context.Context, *connect.Request[v1.OAuthStartRequest]) (*connect.Response[v1.OAuthStartResponse], error)
	OAuthCallback(context.Context, *connect.Request[v1.OAuthCallbackRequest]) (*connect.Response[v1.OAuthCallbackResponse], error)
}

// NewSocialAuthServiceClient constructs a client for the auth.v1.SocialAuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSocialAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SocialAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	socialAuthServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("SocialAuthService").Methods()
	return &socialAuthServiceClient{
		oAuthStart: connect.NewClient[v1.OAuthStartRequest, v1.OAuthStartResponse](
			httpClient,
			baseURL+SocialAuthServiceOAuthStartProcedure,
			connect.WithSchema(socialAuthServiceMethods.ByName("OAuthStart")),
			connect.WithClientOptions(opts...),
		),
		oAuthCallback: connect.NewClient[v1.OAuthCallbackRequest, v1.OAuthCallbackResponse](
			httpClient,
			baseURL+SocialAuthServiceOAuthCallbackProcedure,
			connect.WithSchema(socialAuthServiceMethods.ByName("OAuthCallback")),
			connect.WithClientOptions(opts...),
		),
	}
}

// socialAuthServiceClient implements SocialAuthServiceClient.
type socialAuthServiceClient struct {
	oAuthStart    *connect.Client[v1.OAuthStartRequest, v1.OAuthStartResponse]
	oAuthCallback *connect.Client[v1.OAuthCallbackRequest, v1.OAuthCallbackResponse]
}

// OAuthStart calls auth.v1.SocialAuthService.OAuthStart.
func (c *socialAuthServiceClient) OAuthStart(ctx context.Context, req *connect.Request[v1.OAuthStartRequest]) (*connect.Response[v1.OAuthStartResponse], error) {
	return c.oAuthStart.CallUnary(ctx, req)
}

// OAuthCallback calls auth.v1.SocialAuthService.OAuthCallback.
func (c *socialAuthServiceClient) OAuthCallback(ctx context.Context, req *connect.Request[v1.OAuthCallbackRequest]) (*connect.Response[v1.OAuthCallbackResponse], error) {
	return c.oAuthCallback.CallUnary(ctx, req)
}

// SocialAuthServiceHandler is an implementation of the auth.v1.SocialAuthService service.
type SocialAuthServiceHandler interface {
	OAuthStart(context.Context, *connect.Request[v1.OAuthStartRequest]) (*connect.Response[v1.OAuthStartResponse], error)
	OAuthCallback(context.Context, *connect.Request[v1.OAuthCallbackRequest]) (*connect.Response[v1.OAuthCallbackResponse], error)
}

// NewSocialAuthServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSocialAuthServiceHandler(svc SocialAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	socialAuthServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("SocialAuthService").Methods()
	socialAuthServiceOAuthStartHandler := connect.NewUnaryHandler(
		SocialAuthServiceOAuthStartProcedure,
		svc.OAuthStart,
		connect.WithSchema(socialAuthServiceMethods.ByName("OAuthStart")),
		connect.WithHandlerOptions(opts...),
	)
	socialAuthServiceOAuthCallbackHandler := connect.NewUnaryHandler(
		SocialAuthServiceOAuthCallbackProcedure,
		svc.OAuthCallback,
		connect.WithSchema(socialAuthServiceMethods.ByName("OAuthCallback")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.SocialAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SocialAuthServiceOAuthStartProcedure:
			socialAuthServiceOAuthStartHandler.ServeHTTP(w, r)
		case SocialAuthServiceOAuthCallbackProcedure:
			socialAuthServiceOAuthCallbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSocialAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSocialAuthServiceHandler struct{}

func (UnimplementedSocialAuthServiceHandler) OAuthStart(context.Context, *connect.Request[v1.OAuthStartRequest]) (*connect.Response[v1.OAuthStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SocialAuthService.OAuthStart is not implemented"))
}

func (UnimplementedSocialAuthServiceHandler) OAuthCallback(context.Context, *connect.Request[v1.OAuthCallbackRequest]) (*connect.Response[v1.OAuthCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SocialAuthService.OAuthCallback is not implemented"))
}

// AuthAdminServiceClient is a client for the auth.v1.AuthAdminService service.
type AuthAdminServiceClient interface {
	UpdateUserRoles(context.Context, *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[emptypb.Empty], error)
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
}

// NewAuthAdminServiceClient constructs a client for the auth.v1.AuthAdminService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthAdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authAdminServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthAdminService").Methods()
	return &authAdminServiceClient{
		updateUserRoles: connect.NewClient[v1.UpdateUserRolesRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthAdminServiceUpdateUserRolesProcedure,
			connect.WithSchema(authAdminServiceMethods.ByName("UpdateUserRoles")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[v1.ListRolesRequest, v1.ListRolesResponse](
			httpClient,
			baseURL+AuthAdminServiceListRolesProcedure,
			connect.WithSchema(authAdminServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		listAuditLogs: connect.NewClient[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse](
			httpClient,
			baseURL+AuthAdminServiceListAuditLogsProcedure,
			connect.WithSchema(authAdminServiceMethods.ByName("ListAuditLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authAdminServiceClient implements AuthAdminServiceClient.
type authAdminServiceClient struct {
	updateUserRoles *connect.Client[v1.UpdateUserRolesRequest, emptypb.Empty]
	listRoles       *connect.Client[v1.ListRolesRequest, v1.ListRolesResponse]
	listAuditLogs   *connect.Client[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse]
}

// UpdateUserRoles calls auth.v1.AuthAdminService.UpdateUserRoles.
func (c *authAdminServiceClient) UpdateUserRoles(ctx context.Context, req *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateUserRoles.CallUnary(ctx, req)
}

// ListRoles calls auth.v1.AuthAdminService.ListRoles.
func (c *authAdminServiceClient) ListRoles(ctx context.Context, req *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// ListAuditLogs calls auth.v1.AuthAdminService.ListAuditLogs.
func (c *authAdminServiceClient) ListAuditLogs(ctx context.Context, req *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return c.listAuditLogs.CallUnary(ctx, req)
}

// AuthAdminServiceHandler is an implementation of the auth.v1.AuthAdminService service.
type AuthAdminServiceHandler interface {
	UpdateUserRoles(context.Context, *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[emptypb.Empty], error)
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
}

// NewAuthAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthAdminServiceHandler(svc AuthAdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authAdminServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthAdminService").Methods()
	authAdminServiceUpdateUserRolesHandler := connect.NewUnaryHandler(
		AuthAdminServiceUpdateUserRolesProcedure,
		svc.UpdateUserRoles,
		connect.WithSchema(authAdminServiceMethods.ByName("UpdateUserRoles")),
		connect.WithHandlerOptions(opts...),
	)
	authAdminServiceListRolesHandler := connect.NewUnaryHandler(
		AuthAdminServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(authAdminServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	authAdminServiceListAuditLogsHandler := connect.NewUnaryHandler(
		AuthAdminServiceListAuditLogsProcedure,
		svc.ListAuditLogs,
		connect.WithSchema(authAdminServiceMethods.ByName("ListAuditLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthAdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthAdminServiceUpdateUserRolesProcedure:
			authAdminServiceUpdateUserRolesHandler.ServeHTTP(w, r)
		case AuthAdminServiceListRolesProcedure:
			authAdminServiceListRolesHandler.ServeHTTP(w, r)
		case AuthAdminServiceListAuditLogsProcedure:
			authAdminServiceListAuditLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthAdminServiceHandler struct{}

func (UnimplementedAuthAdminServiceHandler) UpdateUserRoles(context.Context, *connect.Request[v1.UpdateUserRolesRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthAdminService.UpdateUserRoles is not implemented"))
}

func (UnimplementedAuthAdminServiceHandler) ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthAdminService.ListRoles is not implemented"))
}

func (UnimplementedAuthAdminServiceHandler) ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthAdminService.ListAuditLogs is not implemented"))
}
